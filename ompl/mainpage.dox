/**
\mainpage
\htmlinclude manifest.html

@section summary Summary 
    
   @b ompl (Open Motion Planning Library) consists of a set of
   sampling-based motion planning algorithms and nothing more. There
   is no environment specification, there is no collision detection or
   visualisation. There are only motion planners. The purpose of this
   library is to be extensible and freely available. It currently
   contains a set of kinematic sampling-based motion planners and some
   initial versions of planners that can account for differential
   constraints.

   The overall structure can be observed by looking at the @b base/
   directory. There are two main components: 
   - the space information
   - the planner

   The base space information class contains only basic definitions of
   states, paths and goals. Implementations of this space information
   class may contain additional functionality. 

   A planner can be instantiated given an instance of the space
   information. The space information contains the starting states and
   goal definition. The planner reads the neccessary data from the
   space information and fills in a path for the given goal, if it
   finds one.

   <hr> 

   The code in this library is meant to be thread safe. All static,
   non-member or const member functions are thread safe. Calling
   member functions that are not const in multiple threads
   simultaneously is unsafe and locks should be used.
   
   <hr>

   @section sampling_planners Sampling-based motion planners
   
   This class of motion planners typically needs the ability to sample
   the state (configuration) space of the robot(s) planning is done
   for. To allow this, an implementation of
   ompl::base::StateValidityChecker must be provided. This
   implementation will most likely depend on a collision detector.

   @subsection kinematic_planners Planning under geometric constraints

   - @ref kRRT
   - @ref kLazyRRT
   - @ref kSBL
   - @ref kEST
   - @ref kKPIECE1
   - @ref kLBKPIECE1	

Other tools:

   - @ref HCIK
   - @ref GAIK

   @subsection kinodynamic_planners Planning under differential constraints
   
   - @ref dRRT


*/
