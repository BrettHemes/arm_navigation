/**
\mainpage
\htmlinclude manifest.html

@section summary Summary 
    
   @b ompl_ros is a ROS interface to the <a href="../../ompl/html">ompl</a> library.
   
@section models Models

   There are two main classes that instantiate models we can plan for:

   - ompl_ros::ModelKinematic : this is an interface to a kinematic state space definition. 

        '''ompl''' has a definition of a ''space information''.
	 ompl_ros::ModelKinematic inherits from this definition
	 (ompl::base::SpaceInformation) and provides state validation
	 routines using the collision checking routines and the
	 constraint evaluation mechanism from the <a
	 href="../../planning_environment/html">planning_environment</a>
	 package.

	 A typical implementation will use something like this snippet of code:

@verbatim
	 ompl_ros::ModelBase *mk = new ompl_ros::ModelKinematic(planningMonitor, groupName);
	 mk->configure();
@endverbatim

	This will create and configure a state space for a group of
	joints the user specified as part of ''groupName''.

   - ompl_ros::ModelDynamic : this is still being developed, should not be used yet.
   

@section goals Goal Definitions

   Based on the type of constraints specified for a motion plan (<a
href="../../motion_planning_msgs/html">motion_planning_msgs</a>
package), different goal specifications (inherited from
ompl::base::Goal) can be
defined. ompl_ros::computeGoalFromConstraints is a utility function
that creates the correct goal instance, given a
motion_planning_msgs::KinematicConstrains message. The type of goal instances available are:

   - ompl_ros::GoalToState : create a goal instance that knows the exact state we are trying to reach.
   - ompl_ros::GoalToPosition : create a goal instance that only has pose constraints on links.
   - ompl_ros::GoalToMultipleConstraints : create a goal instance for a mixture of constraints.

*/
